{"mappings":"kBAGMA,EAAAA,CACFC,KAAAA,kBAEIC,MAAO,EACPC,SAAS,EACTC,QAAAA,CACEC,UAAU,EACVC,OAAQ,GACRC,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,KAAAA,GACAC,OAAQ,IACRC,IAAK,GACLC,cAAe,GACfC,WAAY,IAEdC,MAAAA,CACE,WACA,qBACA,oBACA,kBACA,eACA,8BACA,4BAEFC,KAAM,EACNC,OAAAA,CAAS,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,cAI/GC,SAAAA,CACEC,SAAAA,kBACMC,KAAKJ,MAAQ,GAAW,iCACxBI,KAAKJ,MAAQ,GAAW,kCACxBI,KAAKJ,MAAQ,GAAW,wCACxBI,KAAKJ,MAAQ,GAAW,oCACxBI,KAAKJ,MAAQ,GAAW,mCACxBI,KAAKJ,MAAQ,IAAY,2CAE/BK,KAAAA,iBACQC,GAAAA,IAAYC,MAAOC,UACnBC,EAAAA,IAASF,KAAKD,EAAQ,QAAUI,UAChCC,EAAAA,IAASJ,KAAKD,EAAQ,QAAUM,WAChCC,EAAAA,IAASN,KAAKD,EAAQ,QAAUQ,uBAC5BL,KAAML,KAAKH,OAAOU,MAAOE,KAErCE,aAAAA,iBACQC,GAAWZ,KAAKhB,QAAQS,cACxBoB,GAAQb,KAAKhB,QAAQU,kBACvBkB,EAAUC,EAAO,GACZD,EAAU,GAEZC,GAETC,aAAAA,iBACQF,GAAWZ,KAAKhB,QAAQS,cACxBoB,GAAQb,KAAKhB,QAAQU,kBACvBkB,EAAUC,EAAO,GACZ,MAEAD,EAAUC,GAAQ,GAAGE,YAAY,IAE5CC,SAAAA,eACMC,EAAAA,SACEC,EAAAA,CAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,eAC/CC,EAAE,EAAGA,EAAE,EAAGA,IAAAA,KACbC,GAAAA,IAAUjB,MAAOkB,SAAWF,EAC5BC,EAAM,IAAGA,GAAO,GACpBH,EAAOK,KAAAA,CACLC,IAAKL,EAAKE,GACVI,KAAAA,IAASrB,MAAOG,UAAUa,WAGvBF,GAETQ,UAAAA,iBACQC,GAAAA,IAAYvB,MAAOK,WACnBmB,GAAAA,IAAWxB,MAAOO,uBACdV,KAAKH,OAAO6B,OAAWC,MAIrCC,QAAAA,CACEC,WAAAA,SAAWC,GACT9B,KAAKjB,QAAUiB,KAAKhB,QAAQC,SAAW6C,EACnCA,GAAK9B,KAAKlB,SAEhBiD,UAAAA,WACE/B,KAAKlB,cACCc,EAAOoC,aAAY,KACvBhC,KAAKJ,OACDI,KAAKJ,MAAQ,MACfqC,cAAcrC,GACdI,KAAKlB,WAEN,MAELoD,WAAAA,YACQlC,KAAKhB,QAAQU,WAAa,GAAMM,KAAKhB,QAAQS,gBACjDO,KAAKhB,QAAQU,WAAaM,KAAKhB,QAAQS,cAAgB,IAG3D0C,cAAAA,YACQnC,KAAKhB,QAAQU,WAAa,GAAMM,KAAKhB,QAAQS,gBACjDO,KAAKhB,QAAQS,cAAgBO,KAAKhB,QAAQU,WAAa,IAG3D0C,YAAAA,SAAYC,EAAQC,EAAKC,IAClBvC,KAAKhB,QAAQqD,GAAUE,IAAKvC,KAAKhB,QAAQqD,GAAUE,IACnDvC,KAAKhB,QAAQqD,GAAUC,IAAKtC,KAAKhB,QAAQqD,GAAUC,MAKhEE,IAAIC,UAAU7D,GAAK8D,MAAM","sources":["./files/app.js"],"sourcesContent":["import './styles.css'\r\nimport './spinner.css'\r\n\r\nconst App = {\r\n    data() {\r\n      return {\r\n        stage: 1,\r\n        initial: true,\r\n        answers: {\r\n          inCanada: true,\r\n          gender: '',\r\n          stg3: '',\r\n          stg5: '',\r\n          stg6: '',\r\n          stg9: [],\r\n          height: 125,\r\n          age: 21,\r\n          currentWeight: 55,\r\n          goalWeight: 45\r\n        },\r\n        goals: [\r\n          'burn fat',\r\n          'improve metabolism',\r\n          'improve digestion',\r\n          'get more energy',\r\n          'better sleep',\r\n          'lose weight without fitness',\r\n          'lose weight without diet'\r\n        ],\r\n        load: 0,\r\n        months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'December']\r\n      }\r\n    },\r\n\r\n    computed: {\r\n      loadText() {\r\n        if (this.load <= 15) return 'Identifying Dietary Profile...'\r\n        if (this.load <= 30) return 'Analyzing Root Cause Factors...'\r\n        if (this.load <= 45) return 'Capsules To Help Eliminate Fatigue...'\r\n        if (this.load <= 60) return 'Capsules For Metabolism Repair...'\r\n        if (this.load <= 75) return 'Capsules That Increase Energy...'\r\n        if (this.load <= 100) return 'Preparing personalized report...'\r\n      },\r\n      date() {\r\n        const today = new Date().getTime()\r\n        const dd = new Date(today + 2.506e+9).getDate()\r\n        const mm = new Date(today + 2.506e+9).getMonth()\r\n        const yy = new Date(today + 2.506e+9).getFullYear()\r\n        return `${dd} ${this.months[mm]} ${yy}`\r\n      },\r\n      resultWeight() {\r\n        const current = +this.answers.currentWeight\r\n        const goal = +this.answers.goalWeight\r\n        if (current - goal > 29) {\r\n          return current - 29\r\n        }\r\n        return goal\r\n      },\r\n      possibleLoss() {\r\n        const current = +this.answers.currentWeight\r\n        const goal = +this.answers.goalWeight\r\n        if (current - goal > 29) {\r\n          return 7.3\r\n        }\r\n        return ((current - goal) / 4).toPrecision(2)\r\n      },\r\n      dateWeek() {\r\n        let result = []\r\n        const week = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']\r\n        for (let i=0; i<7; i++) {\r\n          let idx = new Date().getDay() + i\r\n          if (idx > 6) idx -= 7\r\n          result.push({\r\n            day: week[idx],\r\n            num: new Date().getDate()+i\r\n          })\r\n        }\r\n        return result\r\n      },\r\n      monthYear() {\r\n        const month = new Date().getMonth()\r\n        const year = new Date().getFullYear()\r\n        return `${this.months[month]}, ${year}`\r\n      }\r\n    },\r\n\r\n    methods: {\r\n      fromCanada(ans) {\r\n        this.initial = this.answers.inCanada = ans\r\n        if (ans) this.stage++\r\n      },\r\n      startLoad() {\r\n        this.stage++\r\n        const load = setInterval(() => {\r\n          this.load++\r\n          if (this.load >= 100) {\r\n            clearInterval(load)\r\n            this.stage++\r\n          }\r\n        }, 100)\r\n      },\r\n      handleGoal() {\r\n        if ((+this.answers.goalWeight + 5) >= this.answers.currentWeight) {\r\n          this.answers.goalWeight = this.answers.currentWeight - 5\r\n        }\r\n      },\r\n      handleCurrent() {\r\n        if ((+this.answers.goalWeight + 5) >= this.answers.currentWeight) {\r\n          this.answers.currentWeight = this.answers.goalWeight + 5\r\n        }\r\n      },\r\n      handleInput(target, min, max) {\r\n        if (+this.answers[target] > max) this.answers[target] = max\r\n        if (+this.answers[target] < min) this.answers[target] = min\r\n      }\r\n    }\r\n  }\r\n  \r\nVue.createApp(App).mount('#app')"],"names":["$98c8c3eeca21698dee277ac9eadae560$var$App","data","stage","initial","answers","inCanada","gender","stg3","stg5","stg6","stg9","height","age","currentWeight","goalWeight","goals","load","months","computed","loadText","this","date","today","Date","getTime","dd","getDate","mm","getMonth","yy","getFullYear","resultWeight","current","goal","possibleLoss","toPrecision","dateWeek","result","week","i","idx","getDay","push","day","num","monthYear","month","year","methods","fromCanada","ans","startLoad","setInterval","clearInterval","handleGoal","handleCurrent","handleInput","target","min","max","Vue","createApp","mount"],"version":3,"file":"index.678faeff.js.map"}